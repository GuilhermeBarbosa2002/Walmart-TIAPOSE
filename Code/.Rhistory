<<<<<<< HEAD
x=1:10
x
class(x)
plot(1:10)
plot(x)
demo(graphics)
x=sample(1:10000,100)
x
quadrado
quadrado
quadrado(10)
quadrado(10)
quadrado()
quadrado = function(x=1){
return(x^2)
}
quadrado()
quadrado(10)
setwd("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Walmart-TIAPOSE/Code")
library(rminer) # by Simão Dias
# read data:
cat("read passenger time series:")
d=read.csv("walmart.csv",header=TRUE,sep=",")
d1=d[,4] # d1 -departamento 1
d2=d[,5] # d2 departamento 2
d3=d[,6] # d1 departamento 3
d4=d[,7] # d1 departamento 4
L=length(d1) # Numero de semanas que temos -> 143
K = 4 # Sazonalidade dos dados (achamos que eles se repetem de mês em mês)
H = 4 # Numero de previsões que vamos fazer (4 ultimas semanas)
Rminer <- function(departamento, numeroDepartamento){
# (Os indices)
# Para ficarmos com os dados de treino
NTR = L - H  # numero de dados de treino
TR = 1: NTR  # ficar com os dados de treino
# Para ficarmos com os dados de teste
TS = (NTR + 1):L
# O rminer so aceita dataframes, temos de usar o CaseSeries para converter o TS para DataFrame
D = CasesSeries(ts(departamento),c(1:4))
# Vamos fazer o fit com os dados de treino
#y~        - dizer que as variaveis que vamos prever são derivadas do D (que esta à frente)
#D[TR, ]   - Quais os dados que vão ser usados para dar fit
#model     - qual o modelo é que vamos usar (mlpe = Neural Network)
#search    - método de pesquisa a utilizar
# fit a Neural Network (NN) - multilayer perceptron ensemble with training data:
mpause("fit a neural network (mlpe):")
NN=fit(y~.,D[TR,],model="mlpe",search="heuristic")
# fit a random forest
mpause("fit a random forest (randomForest):")
RF=fit(y~.,D[TR,],model="randomForest",search="heuristic")
print(RF)
#Vamos prever as 4 semanas seguintes (que vai corresponder ao TS)
#Indices
LTS=length(TS) # a ultima previsão (4)
START=nrow(D)-LTS+1 # a primeira previsão
#Prever para a Neural Network
PNN=lforecast(NN,D,start=START,horizon=LTS) # from 1 to TS-ahead predictions
#Prever para o RandomForest
PRF=lforecast(RF,D,start=START,horizon=LTS)
# Guardar os valores reais em Y do TS
Y=D[TS,]$y # valores reais
# show forecasting measures and graph:
cat("NN (MLP) predictions:\n")
print(PNN)
cat("MAE:",mmetric(Y,PNN,metric="MAE"),"\n")
cat("NMAE:",mmetric(Y,PNN,metric="NMAE",val=srange),"\n")
cat("RMSE:",mmetric(Y,PNN,metric="RMSE"),"\n")
cat("RRSE:",mmetric(Y,PNN,metric="RRSE"),"\n")
cat("R2:",mmetric(Y,PNN,metric="R22"),"\n") # press R measure
cat("RF predictions:\n")
print(PRF)
cat("MAE:",mmetric(Y,PRF,metric="MAE"),"\n")
cat("NMAE:",mmetric(Y,PRF,metric="NMAE",val=srange),"\n")
cat("RMSE:",mmetric(Y,PRF,metric="RMSE"),"\n")
cat("RRSE:",mmetric(Y,PRF,metric="RRSE"),"\n")
cat("R2:",mmetric(Y,PRF,metric="R22"),"\n") # press R measure
# graph: REG - simple Regression Plot
mae=mmetric(Y,PNN,metric="MAE")
nmae=mmetric(Y,PRF,metric="NMAE",val=srange)
r2=mmetric(Y,PNN,metric="R22")
print("Graph with NN predictions (1-ahead):")
main=paste("NN pred. (MAE=",round(mae,digits=1),", NMAE=",round(nmae,digits=0),"%, R^2=",round(r2,digits=2),")",sep="")
mgraph(Y,PNN,main=main,graph="REG",Grid=10,lty=1,col=c("black","blue"),leg=list(pos="topright",leg=c("target","predictions")))
}
Rminer(d1,"1")
# read data:
cat("read passenger time series:")
d=read.csv("walmart.csv",header=TRUE,sep=",")
d1=d[,4] # d1 -departamento 1
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(rminer) # by Simão Dias
# read data:
cat("read passenger time series:")
d=read.csv("walmart.csv",header=TRUE,sep=",")
d1=d[,4] # d1 -departamento 1
d2=d[,5] # d2 departamento 2
d3=d[,6] # d1 departamento 3
d4=d[,7] # d1 departamento 4
L=length(d1) # Numero de semanas que temos -> 143
K = 4 # Sazonalidade dos dados (achamos que eles se repetem de mês em mês)
H = 4 # Numero de previsões que vamos fazer (4 ultimas semanas)
Rminer <- function(departamento, numeroDepartamento){
srange=diff(range(ts(departamento))) # compute the range of S
# (Os indices)
# Para ficarmos com os dados de treino
NTR = L - H  # numero de dados de treino
TR = 1: NTR  # ficar com os dados de treino
# Para ficarmos com os dados de teste
TS = (NTR + 1):L
# O rminer so aceita dataframes, temos de usar o CaseSeries para converter o TS para DataFrame
D = CasesSeries(ts(departamento),c(1:4))
# Vamos fazer o fit com os dados de treino
#y~        - dizer que as variaveis que vamos prever são derivadas do D (que esta à frente)
#D[TR, ]   - Quais os dados que vão ser usados para dar fit
#model     - qual o modelo é que vamos usar (mlpe = Neural Network)
#search    - método de pesquisa a utilizar
# fit a Neural Network (NN) - multilayer perceptron ensemble with training data:
mpause("fit a neural network (mlpe):")
NN=fit(y~.,D[TR,],model="mlpe",search="heuristic")
# fit a random forest
mpause("fit a random forest (randomForest):")
RF=fit(y~.,D[TR,],model="randomForest",search="heuristic")
print(RF)
#Vamos prever as 4 semanas seguintes (que vai corresponder ao TS)
#Indices
LTS=length(TS) # a ultima previsão (4)
START=nrow(D)-LTS+1 # a primeira previsão
#Prever para a Neural Network
PNN=lforecast(NN,D,start=START,horizon=LTS) # from 1 to TS-ahead predictions
#Prever para o RandomForest
PRF=lforecast(RF,D,start=START,horizon=LTS)
# Guardar os valores reais em Y do TS
Y=D[TS,]$y # valores reais
# show forecasting measures and graph:
cat("NN (MLP) predictions:\n")
print(PNN)
cat("MAE:",mmetric(Y,PNN,metric="MAE"),"\n")
cat("NMAE:",mmetric(Y,PNN,metric="NMAE",val=srange),"\n")
cat("RMSE:",mmetric(Y,PNN,metric="RMSE"),"\n")
cat("RRSE:",mmetric(Y,PNN,metric="RRSE"),"\n")
cat("R2:",mmetric(Y,PNN,metric="R22"),"\n") # press R measure
cat("RF predictions:\n")
print(PRF)
cat("MAE:",mmetric(Y,PRF,metric="MAE"),"\n")
cat("NMAE:",mmetric(Y,PRF,metric="NMAE",val=srange),"\n")
cat("RMSE:",mmetric(Y,PRF,metric="RMSE"),"\n")
cat("RRSE:",mmetric(Y,PRF,metric="RRSE"),"\n")
cat("R2:",mmetric(Y,PRF,metric="R22"),"\n") # press R measure
# graph: REG - simple Regression Plot
mae=mmetric(Y,PNN,metric="MAE")
nmae=mmetric(Y,PRF,metric="NMAE",val=srange)
r2=mmetric(Y,PNN,metric="R22")
print("Graph with NN predictions (1-ahead):")
main=paste("NN pred. (MAE=",round(mae,digits=1),", NMAE=",round(nmae,digits=0),"%, R^2=",round(r2,digits=2),")",sep="")
mgraph(Y,PNN,main=main,graph="REG",Grid=10,lty=1,col=c("black","blue"),leg=list(pos="topright",leg=c("target","predictions")))
}
Rminer(d1,"1")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Guardar os valores reais em Y do TS
Y=D[TS,ncol(D)] # valores reais
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Walmart-TIAPOSE/Code/Rascunho1.R")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Projeto/Walmart-TIAPOSE/Code/Rminer.R")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Projeto/Walmart-TIAPOSE/Code/Rminer.R")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Projeto/Walmart-TIAPOSE/Code/Rminer.R")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Projeto/Walmart-TIAPOSE/Code/Forecast.R")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Projeto/Walmart-TIAPOSE/Code/Forecast.R")
source("C:/Users/User/OneDrive - Universidade do Minho/Ambiente de Trabalho/Gonçalo/Universidade/4º Ano MEGSI/2º Semestre/TIAPOSE/Projeto/Walmart-TIAPOSE/Code/Rminer.R")
=======
9^^9
9^99
Inf>1
pi
sin(pi*2/3)
help("sin")
x=1
plot(1)
plot(1:10)
plot(1:10, pc="X", main="ola", col="blue", lwd = 3, type="b")
plot(1:10, pch="X", main="ola", col="blue", lwd = 3, type="b")
cls
clear
cls
clear
cl
cls
demo(graphics)
delete
clear
x^2
sqrt(x) + x*pi
jkjk
return(x^2)
quadrado = function(x=1){
return(x^2)
}
quadrado(1)
quadrado(5)
quadrado = function(x){
return(x^2)
}
quadrado = function(x){
return(x^2)
}
quadrado(5)
COS 180
cos(180)
cos(pi)
cos(0)
cos(pi/2)
x=pi/2
cos(x)
cos(3.13/2)
cos(pi)
cos(0)
cos(pi/2)
cos((pi/2))
q()
library(rminer)
X = concat(1,2,3)
x = c(1,2,3,4,5,6)
x[length(c)]
x[length(x)]
x[length(x = 3)]
x[length(x = 10)]
[length(x)]
x[length(x)]
x[length(x)]
x[7:10]
x[1:3]
x[1:3] = -
x[1:3] = -
d
x[1:3] = - x[1:3]
x
summary(x)
class(x)
setwd("~/")
library(forecast)
forecast.ets()
setwd("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
setwd("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code")
git add ...elt()
clear
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
print(length(H_MAE))
print(H_MAE)
print(k)
source("C:/Users/guilh/Desktop/TIAPOSE/Walmart-TIAPOSE/Code/Predict_Guilherme.R")
>>>>>>> f71fa8d9dc322113cf0a3dac75a239f4350bab00
